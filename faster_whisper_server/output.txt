Watching: '/home/ubuntu/seb/audio/faster-whisper-server/faster_whisper_server' '/home/ubuntu/seb/audio/faster-whisper-server/faster_whisper_server'

/home/ubuntu/seb/audio/faster-whisper-server/.venv/lib/python3.11/site-packages/numba/cpython/hashing.py:482: UserWarning: FNV hashing is not implemented in Numba. See PEP 456 https://www.python.org/dev/peps/pep-0456/ for rationale over not using FNV. Numba will continue to work, but hashes for built in types will be computed using siphash24. This will permit e.g. dictionaries to continue to behave as expected, however anything relying on the value of the hash opposed to hash as a derived property is likely to not work as expected.
  warnings.warn(msg)
 > tts_models/multilingual/multi-dataset/xtts_v2 is already downloaded.
 > Using model: xtts
/home/ubuntu/seb/audio/faster-whisper-server/.venv/lib/python3.11/site-packages/TTS/tts/layers/xtts/xtts_manager.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.speakers = torch.load(speaker_file_path)
/home/ubuntu/seb/audio/faster-whisper-server/.venv/lib/python3.11/site-packages/TTS/utils/io.py:54: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location=map_location, **kwargs)
Traceback (most recent call last):
  File "/home/ubuntu/seb/audio/faster-whisper-server/faster_whisper_server/stt.py", line 32, in <module>
    from faster_whisper_server.speech import (
  File "/home/ubuntu/seb/audio/faster-whisper-server/faster_whisper_server/speech.py", line 146, in <module>
    tts = TTS(model, gpu)
          ^^^^^^^^^^^^^^^
  File "/home/ubuntu/seb/audio/faster-whisper-server/.venv/lib/python3.11/site-packages/TTS/api.py", line 81, in __init__
    self.load_tts_model_by_path(
  File "/home/ubuntu/seb/audio/faster-whisper-server/.venv/lib/python3.11/site-packages/TTS/api.py", line 203, in load_tts_model_by_path
    self.synthesizer = Synthesizer(
                       ^^^^^^^^^^^^
  File "/home/ubuntu/seb/audio/faster-whisper-server/.venv/lib/python3.11/site-packages/TTS/utils/synthesizer.py", line 93, in __init__
    self._load_tts(tts_checkpoint, tts_config_path, use_cuda)
  File "/home/ubuntu/seb/audio/faster-whisper-server/.venv/lib/python3.11/site-packages/TTS/utils/synthesizer.py", line 183, in _load_tts
    self.tts_config = load_config(tts_config_path)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/seb/audio/faster-whisper-server/.venv/lib/python3.11/site-packages/TTS/config/__init__.py", line 82, in load_config
    ext = os.path.splitext(config_path)[1]
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<frozen posixpath>", line 118, in splitext
TypeError: expected str, bytes or os.PathLike object, not NoneType
